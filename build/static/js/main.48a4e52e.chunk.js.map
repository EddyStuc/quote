{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","quote","setQuote","author","setAuthor","useEffect","fetch","then","res","json","content","className","id","onClick","target","href","encodeURI","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LA0CeA,MAvCf,WAEA,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAwBA,OAtBAC,qBAAU,WACNC,MAAM,iCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACN,GACCC,EAASD,EAAMS,SACfN,EAAUH,EAAME,aAGxB,IAcE,qBAAKQ,UAAU,MAAf,SACI,sBAAKA,UAAU,QAAQC,GAAG,YAA1B,UACE,oBAAGA,GAAG,OAAN,cAAeX,EAAf,OACA,oBAAGW,GAAG,SAAN,eAAkBT,KAClB,wBAAQQ,UAAU,MAAMC,GAAG,YAAYC,QAhB7B,WAClBP,MAAM,iCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACN,GACCC,EAASD,EAAMS,SACfN,EAAUH,EAAME,YAUhB,0BACA,mBAAGQ,UAAU,QAAQC,GAAG,cAAcE,OAAO,SAASC,KAAMC,UAAU,gEAAtE,+BCxBKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.48a4e52e.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.scss';\n\nfunction App() {\n\nconst [quote, setQuote] = useState(\"\")\nconst [author, setAuthor] = useState(\"\")\n\nuseEffect(() => {\n    fetch(\"http://api.quotable.io/random\")\n      .then(res => res.json())\n      .then (\n        (quote) => {\n          setQuote(quote.content);\n          setAuthor(quote.author);\n        }\n      )\n},[]);\n\nlet fetchNewQuote = () => {\n  fetch(\"http://api.quotable.io/random\")\n      .then(res => res.json())\n      .then (\n        (quote) => {\n          setQuote(quote.content);\n          setAuthor(quote.author);\n        }\n      )\n}\n\nreturn (\n    <div className=\"App\">\n        <div className=\"quote\" id=\"quote-box\">\n          <p id=\"text\">\"{quote}\"</p>\n          <p id=\"author\">- {author}</p>\n          <button className=\"btn\" id=\"new-quote\" onClick={fetchNewQuote}>Change Quote</button>\n          <a className=\"tweet\" id=\"tweet-quote\" target=\"_blank\" href={encodeURI('http://www.twitter.com/intent/tweet?text=${quote} -${author}')}>Tweet Quote</a>\n          </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./App.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}